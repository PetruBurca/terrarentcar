import { initializeApp } from "firebase/app";
import { httpsCallable, getFunctions } from "firebase/functions";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import {
  getFirestore,
  collection,
  getDocs,
  addDoc,
  query,
  orderBy,
  limit,
} from "firebase/firestore";
import { createSecurePayload } from "./cryptoUtils";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç)
const firebaseConfig = {
  apiKey: "AIzaSyCnH5K4RB7i5RNgDthSK0wPAiM0wTkYnAE",
  authDomain: "terrarentcar-f1fda.firebaseapp.com",
  projectId: "terrarentcar-f1fda",
  storageBucket: "terrarentcar-f1fda.firebasestorage.app",
  messagingSenderId: "114261195759",
  appId: "1:114261195759:web:33356a53fcd35612d2541a",
  // measurementId: "G-9D32Y58JV2", // –£–±—Ä–∞–Ω–æ - —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç Google Analytics
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (
  !firebaseConfig.apiKey ||
  !firebaseConfig.authDomain ||
  !firebaseConfig.projectId
) {
  throw new Error(
    "–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Firebase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  );
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
export const app = initializeApp(firebaseConfig);
const storage = getStorage(app);
export const functions = getFunctions(app);
export const db = getFirestore(app);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Firebase Storage
export async function uploadFileToFirebase(
  file: File,
  folder: string = "documents"
): Promise<string> {
  try {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const fileName = `${folder}/${timestamp}_${file.name}`;

    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Storage
    const storageRef = ref(storage, fileName);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    const snapshot = await uploadBytes(storageRef, file);

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º–æ–π URL –∏–∑ Storage
    const downloadURL = await getDownloadURL(snapshot.ref);

    console.log("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:", fileName, "URL:", downloadURL);
    return downloadURL;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Firebase:", error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–∞–π–ª–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–æ—Å—Ç—É–ø–∞
export async function getFileURL(filePath: string): Promise<string> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –∫ –ø–∞—Å–ø–æ—Ä—Ç—É

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const secureKey = import.meta.env.VITE_FIREBASE_SECRET_TOKEN;
    console.log("üîç –û—Ç–ª–∞–¥–∫–∞ SECURE_KEY:", {
      secureKey,
      secureKeyLength: secureKey?.length,
      secureKeyType: typeof secureKey,
      isUndefined: secureKey === undefined,
      isEmpty: secureKey === "",
      envVars: Object.keys(import.meta.env).filter((key) =>
        key.startsWith("VITE_")
      ),
    });

    if (!secureKey) {
      throw new Error(
        "VITE_FIREBASE_SECRET_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
      );
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º callable function –≤–º–µ—Å—Ç–æ hardcoded —Å—Å—ã–ª–∫–∏
    const getPassport = httpsCallable(functions, "getPassport");

    // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π payload —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
    const securePayload = createSecurePayload(filePath, secureKey);

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π payload:", securePayload);

    const result = await getPassport(securePayload);

    if (
      result.data &&
      typeof result.data === "object" &&
      "downloadUrl" in result.data
    ) {
      return (result.data as { downloadUrl: string }).downloadUrl;
    } else {
      throw new Error("Invalid response from Cloud Function");
    }

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–∞–π–ª–∞:", error);
    throw error;
  }
}
