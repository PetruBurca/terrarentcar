import { useEffect } from "react";
import { useCacheManager } from "@/hooks/use-cache-manager";

interface CacheManagerProps {
  autoClearTime?: number;
  enableDoubleRefresh?: boolean;
  showDebugInfo?: boolean;
}

interface CacheManagerWindow extends Window {
  cacheManager?: {
    clearAll: () => void;
    clearQuery: () => void;
    clearStorage: () => void;
    getTimeSinceLastVisit: () => number;
    shouldClearCacheByTime: () => boolean;
    lastVisitTime: number;
    forceClear: () => void;
    checkCache: () => string[];
    forceClearProduction: () => void;
  };
}

const CacheManager = ({
  autoClearTime = 5 * 60 * 1000,
  enableDoubleRefresh = true,
  showDebugInfo = false,
}: CacheManagerProps) => {
  const {
    clearAllCache,
    clearQueryCache,
    clearLocalStorage,
    getTimeSinceLastVisit,
    shouldClearCacheByTime,
    lastVisitTime,
  } = useCacheManager({
    autoClearTime,
    enableDoubleRefresh,
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const timeSinceLastVisit = getTimeSinceLastVisit();

    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º autoClearTime, –æ—á–∏—â–∞–µ–º –∫—ç—à
    if (
      timeSinceLastVisit > autoClearTime &&
      timeSinceLastVisit < 24 * 60 * 60 * 1000
    ) {
      console.log(
        `üïê –ü—Ä–æ—à–ª–æ ${Math.round(
          timeSinceLastVisit / 1000 / 60
        )} –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è, –æ—á–∏—â–∞–µ–º –∫—ç—à`
      );
      clearAllCache();
    }
  }, [autoClearTime, getTimeSinceLastVisit, clearAllCache]);

  // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã –≤ production)
  useEffect(() => {
    if (showDebugInfo) {
      (window as CacheManagerWindow).cacheManager = {
        clearAll: clearAllCache,
        clearQuery: clearQueryCache,
        clearStorage: clearLocalStorage,
        getTimeSinceLastVisit,
        shouldClearCacheByTime,
        lastVisitTime,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        forceClear: () => {
          console.log("üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞");
          clearAllCache();
        },
        checkCache: () => {
          const keys = Object.keys(localStorage);
          const cacheKeys = keys.filter(
            (key) =>
              key.includes("reservation") ||
              key.includes("search") ||
              key.includes("uploaded") ||
              key.includes("privacy") ||
              key.includes("wizard") ||
              key.includes("country") ||
              key.includes("image")
          );
          console.log("üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∫—ç—à–∞:", cacheKeys);
          return cacheKeys;
        },
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        forceClearProduction: () => {
          console.log("üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞");
          // –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫—ç—à–∏
          localStorage.clear();
          sessionStorage.clear();
          clearAllCache();

          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –∫—É–∫–∏
          localStorage.removeItem("cookieAccepted");

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
          setTimeout(() => {
            window.location.reload();
          }, 100);
        },
      };

      console.log("üîß CacheManager –¥–æ—Å—Ç—É–ø–µ–Ω –≤ window.cacheManager –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏");
      console.log(
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ window.cacheManager.forceClear() –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"
      );
    }
  }, [
    clearAllCache,
    clearQueryCache,
    clearLocalStorage,
    getTimeSinceLastVisit,
    shouldClearCacheByTime,
    lastVisitTime,
    showDebugInfo,
  ]);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ
  return null;
};

export default CacheManager;
