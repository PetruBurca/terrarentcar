import { useEffect, useRef } from "react";
import { useQueryClient } from "@tanstack/react-query";

interface CacheManagerOptions {
  autoClearTime?: number; // –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
  enableDoubleRefresh?: boolean; // –≤–∫–ª—é—á–∏—Ç—å —Å–±—Ä–æ—Å –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
}

export const useCacheManager = (options: CacheManagerOptions = {}) => {
  const {
    autoClearTime = 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    enableDoubleRefresh = true,
  } = options;

  const queryClient = useQueryClient();
  const lastVisitTime = useRef<number>(Date.now());
  const refreshCount = useRef<number>(0);
  const refreshTimeout = useRef<NodeJS.Timeout | null>(null);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è
  useEffect(() => {
    lastVisitTime.current = Date.now();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
    const clearTimer = setTimeout(() => {
      clearAllCache();
    }, autoClearTime);

    return () => {
      clearTimeout(clearTimer);
    };
  }, [autoClearTime]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–≤–æ–π–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    if (!enableDoubleRefresh) return;

    let lastRefreshTime = 0;
    const DOUBLE_REFRESH_THRESHOLD = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

    const handleBeforeUnload = () => {
      refreshCount.current++;
      lastRefreshTime = Date.now();

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      if (refreshTimeout.current) {
        clearTimeout(refreshTimeout.current);
      }

      refreshTimeout.current = setTimeout(() => {
        refreshCount.current = 0;
      }, 3000);
    };

    const handleLoad = () => {
      const timeSinceLastRefresh = Date.now() - lastRefreshTime;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–æ–π–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∂–µ—Å—Ç–∫—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
      if (refreshCount.current >= 2 || 
          (refreshCount.current >= 1 && timeSinceLastRefresh < DOUBLE_REFRESH_THRESHOLD)) {
        console.log('üîÑ –î–≤–æ–π–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∂–µ—Å—Ç–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
        clearAllCache();
        refreshCount.current = 0;
      }
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∂–µ—Å—Ç–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    const handleKeyDown = (e: KeyboardEvent) => {
      // Cmd+Shift+R (Mac) –∏–ª–∏ Ctrl+Shift+R (Windows/Linux)
      if ((e.metaKey || e.ctrlKey) && e.shiftKey && e.key === 'R') {
        console.log('üîÑ –ñ–µ—Å—Ç–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
        clearAllCache();
      }
    };

    window.addEventListener("beforeunload", handleBeforeUnload);
    window.addEventListener("load", handleLoad);
    window.addEventListener("keydown", handleKeyDown);

    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload);
      window.removeEventListener("load", handleLoad);
      window.removeEventListener("keydown", handleKeyDown);
      if (refreshTimeout.current) {
        clearTimeout(refreshTimeout.current);
      }
    };
  }, [enableDoubleRefresh]);

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π
  const clearAllCache = () => {
    console.log("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π...");

    // –û—á–∏—â–∞–µ–º React Query –∫—ç—à
    queryClient.clear();

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ localStorage
    const oldKeysToRemove = [
      "reservation-form",
      "search-dates",
      "reservation-step",
      "uploaded-photos",
      "privacy-accepted",
      "wizard-data",
      "selected-country-code",
      "active-image-index",
      "selected-car-id",
    ];

    oldKeysToRemove.forEach((key) => {
      localStorage.removeItem(key);
    });

    // –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ –º–∞—à–∏–Ω–∞–º
    const keys = Object.keys(localStorage);
    const carKeys = keys.filter(
      (key) =>
        key.includes("reservation-form-") ||
        key.includes("reservation-step-") ||
        key.includes("uploaded-photos-") ||
        key.includes("privacy-accepted-") ||
        key.includes("wizard-data-") ||
        key.includes("selected-country-code-") ||
        key.includes("active-image-index-")
    );

    carKeys.forEach((key) => {
      localStorage.removeItem(key);
    });

    // –û—á–∏—â–∞–µ–º Service Worker –∫—ç—à
    if ("serviceWorker" in navigator && "caches" in window) {
      caches.keys().then((cacheNames) => {
        cacheNames.forEach((cacheName) => {
          caches.delete(cacheName);
        });
      });
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
    lastVisitTime.current = Date.now();

    console.log("‚úÖ –ö—ç—à–∏ –æ—á–∏—â–µ–Ω—ã (–≤–∫–ª—é—á–∞—è –∫—ç—à–∏ –º–∞—à–∏–Ω)");
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ React Query –∫—ç—à–∞
  const clearQueryCache = () => {
    queryClient.clear();
    console.log("‚úÖ React Query –∫—ç—à –æ—á–∏—â–µ–Ω");
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ localStorage
  const clearLocalStorage = () => {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏
    const oldKeysToRemove = [
      "reservation-form",
      "search-dates",
      "reservation-step",
      "uploaded-photos",
      "privacy-accepted",
      "wizard-data",
      "selected-country-code",
      "active-image-index",
      "selected-car-id",
    ];

    oldKeysToRemove.forEach((key) => {
      localStorage.removeItem(key);
    });

    // –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ –º–∞—à–∏–Ω–∞–º
    const keys = Object.keys(localStorage);
    const carKeys = keys.filter(
      (key) =>
        key.includes("reservation-form-") ||
        key.includes("reservation-step-") ||
        key.includes("uploaded-photos-") ||
        key.includes("privacy-accepted-") ||
        key.includes("wizard-data-") ||
        key.includes("selected-country-code-") ||
        key.includes("active-image-index-")
    );

    carKeys.forEach((key) => {
      localStorage.removeItem(key);
    });

    console.log("‚úÖ LocalStorage –æ—á–∏—â–µ–Ω (–≤–∫–ª—é—á–∞—è –∫—ç—à–∏ –º–∞—à–∏–Ω)");
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
  const getTimeSinceLastVisit = () => {
    return Date.now() - lastVisitTime.current;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const shouldClearCacheByTime = () => {
    return getTimeSinceLastVisit() >= autoClearTime;
  };

  return {
    clearAllCache,
    clearQueryCache,
    clearLocalStorage,
    getTimeSinceLastVisit,
    shouldClearCacheByTime,
    lastVisitTime: lastVisitTime.current,
  };
};
