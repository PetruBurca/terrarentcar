const CACHE_NAME = "terra-rent-car-v5";
const urlsToCache = [
  "/",
  "/index.html",
  "/src/main.tsx",
  "/src/App.tsx",
  "/src/index.css",
];

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ (5 –º–∏–Ω—É—Ç - –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
const CACHE_LIFETIME = 5 * 60 * 1000;

// Install event
self.addEventListener("install", (event) => {
  console.log("üîÑ Service Worker: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∫—ç—à–∞ v5");
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(urlsToCache).then(() => {
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º
        return Promise.all(
          urlsToCache.map((url) =>
            cache.match(url).then((response) => {
              if (response) {
                const newResponse = new Response(response.body, {
                  status: response.status,
                  statusText: response.statusText,
                  headers: {
                    ...Object.fromEntries(response.headers.entries()),
                    "sw-cache-time": Date.now().toString(),
                    "sw-version": "v5",
                  },
                });
                return cache.put(url, newResponse);
              }
            })
          )
        );
      });
    })
  );
});

// Fetch event
self.addEventListener("fetch", (event) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º –∏ Chrome
  const isMobile =
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent
    );
  const isChrome = /Chrome/i.test(navigator.userAgent);

  event.respondWith(
    caches.match(event.request).then((response) => {
      if (response) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞
        const cacheTime = response.headers.get("sw-cache-time");
        if (cacheTime) {
          const age = Date.now() - parseInt(cacheTime);
          // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞
          // –î–ª—è Chrome –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –Ω–µ–º–Ω–æ–≥–æ –∫–æ—Ä–æ—á–µ
          let lifetime = CACHE_LIFETIME;
          if (isMobile) {
            lifetime = CACHE_LIFETIME / 2; // 2.5 –º–∏–Ω—É—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (isChrome) {
              lifetime = CACHE_LIFETIME / 3; // 1.5 –º–∏–Ω—É—Ç—ã –¥–ª—è Chrome –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            }
          }
          if (age > lifetime) {
            // –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            caches.delete(event.request);
            return fetch(event.request);
          }
        }
        return response;
      }
      return fetch(event.request);
    })
  );
});

// Activate event
self.addEventListener("activate", (event) => {
  console.log("üîÑ Service Worker: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏");
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à:", cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
